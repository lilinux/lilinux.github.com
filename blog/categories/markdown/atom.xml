<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: markdown | lilinux's blog]]></title>
  <link href="http://lilinux.github.com/blog/categories/markdown/atom.xml" rel="self"/>
  <link href="http://lilinux.github.com/"/>
  <updated>2012-07-19T20:26:19+08:00</updated>
  <id>http://lilinux.github.com/</id>
  <author>
    <name><![CDATA[lilinux]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[markdown测试页面]]></title>
    <link href="http://lilinux.github.com/blog/2012/07/markdownce-shi-ye-mian/"/>
    <updated>2012-07-19T18:43:00+08:00</updated>
    <id>http://lilinux.github.com/blog/2012/07/markdownce-shi-ye-mian</id>
    <content type="html"><![CDATA[<h1>0.    前言</h1>

<p>这是一篇<strong>测试</strong>文档</p>

<hr />

<!--more -->


<h1>1.   代码示例</h1>

<p>Plain
<code>
$ sudo make me a sandwich
</code></p>

<p>Example With Syntax Highlighting a Caption and Link</p>

<p>``` ruby Discover if a number is prime http://www.noulakaz.net/weblog/2007/03/18/a-regular-expression-to-check-for-prime-numbers/ Source Article
class Fixnum
  def prime?</p>

<pre><code>('1' * self) !~ /^1?$|^(11+?)\1+$/
</code></pre>

<p>  end
end
```</p>

<p>``` python 选择合适的so
import sys</p>

<p>sub_version = sys.version_info[1]<br/>
if sub_version == 4:</p>

<pre><code>import setproctitle24 as setproctitlelib
</code></pre>

<p>elif sub_version == 6:</p>

<pre><code>import setproctitle26 as setproctitlelib
</code></pre>

<p>else:</p>

<pre><code>setproctitlelib = None
</code></pre>

<p>def setproctitle(title):</p>

<pre><code>if setproctitlelib:
    setproctitlelib.setproctitle(title)

def getproctitle():
    if setproctitlelib:
        return setproctitlelib.getproctitle()
    else:
        return None
</code></pre>

<p>```</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>ping host (ping.cpp)</span> <a href='/downloads/code//home/lili/src/tmp/ping.cpp'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
<span class='line-number'>289</span>
<span class='line-number'>290</span>
<span class='line-number'>291</span>
<span class='line-number'>292</span>
<span class='line-number'>293</span>
<span class='line-number'>294</span>
<span class='line-number'>295</span>
<span class='line-number'>296</span>
<span class='line-number'>297</span>
<span class='line-number'>298</span>
<span class='line-number'>299</span>
<span class='line-number'>300</span>
<span class='line-number'>301</span>
<span class='line-number'>302</span>
<span class='line-number'>303</span>
<span class='line-number'>304</span>
<span class='line-number'>305</span>
<span class='line-number'>306</span>
<span class='line-number'>307</span>
<span class='line-number'>308</span>
<span class='line-number'>309</span>
<span class='line-number'>310</span>
<span class='line-number'>311</span>
<span class='line-number'>312</span>
<span class='line-number'>313</span>
<span class='line-number'>314</span>
<span class='line-number'>315</span>
<span class='line-number'>316</span>
<span class='line-number'>317</span>
<span class='line-number'>318</span>
<span class='line-number'>319</span>
<span class='line-number'>320</span>
<span class='line-number'>321</span>
<span class='line-number'>322</span>
<span class='line-number'>323</span>
<span class='line-number'>324</span>
<span class='line-number'>325</span>
<span class='line-number'>326</span>
<span class='line-number'>327</span>
<span class='line-number'>328</span>
<span class='line-number'>329</span>
<span class='line-number'>330</span>
<span class='line-number'>331</span>
<span class='line-number'>332</span>
<span class='line-number'>333</span>
<span class='line-number'>334</span>
<span class='line-number'>335</span>
<span class='line-number'>336</span>
<span class='line-number'>337</span>
<span class='line-number'>338</span>
<span class='line-number'>339</span>
<span class='line-number'>340</span>
<span class='line-number'>341</span>
<span class='line-number'>342</span>
<span class='line-number'>343</span>
<span class='line-number'>344</span>
<span class='line-number'>345</span>
<span class='line-number'>346</span>
<span class='line-number'>347</span>
<span class='line-number'>348</span>
<span class='line-number'>349</span>
<span class='line-number'>350</span>
<span class='line-number'>351</span>
<span class='line-number'>352</span>
<span class='line-number'>353</span>
<span class='line-number'>354</span>
<span class='line-number'>355</span>
<span class='line-number'>356</span>
<span class='line-number'>357</span>
<span class='line-number'>358</span>
<span class='line-number'>359</span>
<span class='line-number'>360</span>
<span class='line-number'>361</span>
<span class='line-number'>362</span>
<span class='line-number'>363</span>
<span class='line-number'>364</span>
<span class='line-number'>365</span>
<span class='line-number'>366</span>
<span class='line-number'>367</span>
<span class='line-number'>368</span>
<span class='line-number'>369</span>
<span class='line-number'>370</span>
<span class='line-number'>371</span>
<span class='line-number'>372</span>
<span class='line-number'>373</span>
<span class='line-number'>374</span>
<span class='line-number'>375</span>
<span class='line-number'>376</span>
<span class='line-number'>377</span>
<span class='line-number'>378</span>
<span class='line-number'>379</span>
<span class='line-number'>380</span>
<span class='line-number'>381</span>
<span class='line-number'>382</span>
<span class='line-number'>383</span>
<span class='line-number'>384</span>
<span class='line-number'>385</span>
<span class='line-number'>386</span>
<span class='line-number'>387</span>
<span class='line-number'>388</span>
<span class='line-number'>389</span>
<span class='line-number'>390</span>
<span class='line-number'>391</span>
<span class='line-number'>392</span>
<span class='line-number'>393</span>
<span class='line-number'>394</span>
<span class='line-number'>395</span>
<span class='line-number'>396</span>
<span class='line-number'>397</span>
<span class='line-number'>398</span>
<span class='line-number'>399</span>
<span class='line-number'>400</span>
<span class='line-number'>401</span>
<span class='line-number'>402</span>
<span class='line-number'>403</span>
<span class='line-number'>404</span>
<span class='line-number'>405</span>
<span class='line-number'>406</span>
<span class='line-number'>407</span>
<span class='line-number'>408</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;arpa/inet.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sys/types.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sys/socket.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sys/time.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sys/select.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sys/epoll.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;netinet/in.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;netinet/ip.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;netinet/ip_icmp.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;netdb.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;fcntl.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdint.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;errno.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cassert&gt;</span>
</span><span class='line'><span class="cp">#include &quot;ping.h&quot;</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define PACKET_SIZE 84 </span><span class="c1">// IP头加ICMP报文(20+8+56)</span>
</span><span class='line'><span class="cp">#define HEAD_LEN 8     </span><span class="c1">// ICMP头为8字节</span>
</span><span class='line'><span class="cp">#define DATA_LEN 56    </span><span class="c1">// ICMP数据为56字节</span>
</span><span class='line'>
</span><span class='line'><span class="kt">char</span> <span class="n">send_pkt</span><span class="p">[</span><span class="n">HEAD_LEN</span><span class="o">+</span><span class="n">DATA_LEN</span><span class="p">];</span>
</span><span class='line'><span class="kt">char</span> <span class="n">recv_pkt</span><span class="p">[</span><span class="n">PACKET_SIZE</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="n">uint16_t</span> <span class="n">in_cksum</span><span class="p">(</span><span class="n">uint16_t</span> <span class="o">*</span><span class="n">addr</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="n">len</span><span class="p">);</span>  <span class="c1">// 校验和</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 将target转换为网络序的ip并填入到sockaddr_in结构</span>
</span><span class='line'><span class="k">static</span> <span class="kt">int</span> <span class="n">fill_addr</span><span class="p">(</span><span class="k">const</span> <span class="n">string</span><span class="o">&amp;</span> <span class="n">target</span><span class="p">,</span> <span class="k">struct</span> <span class="n">sockaddr_in</span><span class="o">&amp;</span> <span class="n">addr</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">memset</span><span class="p">(</span><span class="o">&amp;</span><span class="n">addr</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">sockaddr_in</span><span class="p">));</span>
</span><span class='line'>    <span class="n">addr</span><span class="p">.</span><span class="n">sin_family</span> <span class="o">=</span> <span class="n">AF_INET</span><span class="p">;</span>
</span><span class='line'>    <span class="n">addr</span><span class="p">.</span><span class="n">sin_addr</span><span class="p">.</span><span class="n">s_addr</span> <span class="o">=</span> <span class="n">inet_addr</span><span class="p">(</span><span class="n">target</span><span class="p">.</span><span class="n">c_str</span><span class="p">());</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">addr</span><span class="p">.</span><span class="n">sin_addr</span><span class="p">.</span><span class="n">s_addr</span> <span class="o">==</span> <span class="p">(</span><span class="n">u_int</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="c1">// 转换ip失败，认为target是域名</span>
</span><span class='line'>        <span class="k">struct</span> <span class="n">hostent</span> <span class="o">*</span><span class="n">hp</span> <span class="o">=</span> <span class="n">gethostbyname</span><span class="p">(</span><span class="n">target</span><span class="p">.</span><span class="n">c_str</span><span class="p">());</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">hp</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">memcpy</span><span class="p">(</span><span class="o">&amp;</span><span class="n">addr</span><span class="p">.</span><span class="n">sin_addr</span><span class="p">,</span> <span class="n">hp</span><span class="o">-&gt;</span><span class="n">h_addr_list</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">hp</span><span class="o">-&gt;</span><span class="n">h_length</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 填充icmp结构体</span>
</span><span class='line'><span class="k">static</span> <span class="kt">int</span> <span class="n">fill_icmp</span><span class="p">(</span><span class="k">struct</span> <span class="n">icmp</span> <span class="o">*</span><span class="n">icmp_pkt</span><span class="p">,</span> <span class="kt">int</span> <span class="n">id</span><span class="p">,</span> <span class="kt">int</span> <span class="n">seq</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">icmp_pkt</span><span class="o">-&gt;</span><span class="n">icmp_type</span> <span class="o">=</span> <span class="n">ICMP_ECHO</span><span class="p">;</span>
</span><span class='line'>    <span class="n">icmp_pkt</span><span class="o">-&gt;</span><span class="n">icmp_code</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">icmp_pkt</span><span class="o">-&gt;</span><span class="n">icmp_cksum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">icmp_pkt</span><span class="o">-&gt;</span><span class="n">icmp_seq</span> <span class="o">=</span> <span class="n">seq</span><span class="p">;</span>
</span><span class='line'>    <span class="n">icmp_pkt</span><span class="o">-&gt;</span><span class="n">icmp_id</span> <span class="o">=</span> <span class="n">id</span><span class="p">;</span>
</span><span class='line'>    <span class="n">icmp_pkt</span><span class="o">-&gt;</span><span class="n">icmp_cksum</span> <span class="o">=</span> <span class="n">in_cksum</span><span class="p">((</span><span class="kt">unsigned</span> <span class="kt">short</span> <span class="o">*</span><span class="p">)</span><span class="n">icmp_pkt</span><span class="p">,</span> <span class="n">HEAD_LEN</span><span class="o">+</span><span class="n">DATA_LEN</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 检查接收到的icmp，用于ping函数</span>
</span><span class='line'><span class="k">static</span> <span class="kt">int</span> <span class="n">check_icmp_reply</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">recv</span><span class="p">,</span> <span class="kt">int</span> <span class="n">recv_len</span><span class="p">,</span> <span class="kt">int</span> <span class="n">id</span><span class="p">,</span> <span class="kt">int</span> <span class="n">seq</span><span class="p">,</span> <span class="kt">int</span><span class="o">&amp;</span> <span class="n">reply_type</span><span class="p">,</span> <span class="kt">int</span><span class="o">&amp;</span> <span class="n">reply_code</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">ip_len</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">ip</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">recv_len</span> <span class="o">&lt;</span> <span class="n">ip_len</span> <span class="o">+</span> <span class="n">ICMP_MINLEN</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">icmp</span> <span class="o">*</span><span class="n">icmp_pkt</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">icmp</span><span class="o">*</span><span class="p">)(</span><span class="n">recv</span> <span class="o">+</span> <span class="n">ip_len</span><span class="p">);</span>
</span><span class='line'>    <span class="n">reply_type</span> <span class="o">=</span> <span class="n">icmp_pkt</span><span class="o">-&gt;</span><span class="n">icmp_type</span><span class="p">;</span>
</span><span class='line'>    <span class="n">reply_code</span> <span class="o">=</span> <span class="n">icmp_pkt</span><span class="o">-&gt;</span><span class="n">icmp_code</span><span class="p">;</span>
</span><span class='line'>    <span class="k">switch</span> <span class="p">(</span><span class="n">reply_type</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="nl">ICMP_ECHOREPLY:</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">icmp_pkt</span><span class="o">-&gt;</span><span class="n">icmp_id</span> <span class="o">!=</span> <span class="n">id</span> <span class="o">||</span> <span class="n">icmp_pkt</span><span class="o">-&gt;</span><span class="n">icmp_seq</span> <span class="o">!=</span> <span class="n">seq</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">PING_OK</span><span class="p">;</span>
</span><span class='line'>    <span class="k">case</span> <span class="nl">ICMP_DEST_UNREACH:</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">PING_UNREACHABLE</span><span class="p">;</span>
</span><span class='line'>    <span class="k">default</span><span class="o">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">PING_UNKNOWN_TYPE</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 检查接收到的icmp，用于batch_ping函数</span>
</span><span class='line'><span class="k">static</span> <span class="kt">int</span> <span class="n">check_icmp_reply2</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">recv</span><span class="p">,</span> <span class="kt">int</span> <span class="n">recv_len</span><span class="p">,</span> <span class="kt">int</span> <span class="n">id</span><span class="p">,</span> <span class="kt">int</span><span class="o">&amp;</span> <span class="n">seq</span><span class="p">,</span> <span class="kt">int</span><span class="o">&amp;</span> <span class="n">reply_type</span><span class="p">,</span> <span class="kt">int</span><span class="o">&amp;</span> <span class="n">reply_code</span><span class="p">,</span> <span class="n">string</span><span class="o">&amp;</span> <span class="n">rip</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">ip_len</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">ip</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">recv_len</span> <span class="o">&lt;</span> <span class="n">ip_len</span> <span class="o">+</span> <span class="n">ICMP_MINLEN</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">rip</span> <span class="o">=</span> <span class="n">inet_ntoa</span><span class="p">(((</span><span class="k">struct</span> <span class="n">ip</span><span class="o">*</span><span class="p">)</span><span class="n">recv</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">ip_src</span><span class="p">);</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">icmp</span> <span class="o">*</span><span class="n">icmp_pkt</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">icmp</span><span class="o">*</span><span class="p">)(</span><span class="n">recv</span> <span class="o">+</span> <span class="n">ip_len</span><span class="p">);</span>
</span><span class='line'>    <span class="n">seq</span> <span class="o">=</span> <span class="n">icmp_pkt</span><span class="o">-&gt;</span><span class="n">icmp_seq</span><span class="p">;</span>
</span><span class='line'>    <span class="n">reply_type</span> <span class="o">=</span> <span class="n">icmp_pkt</span><span class="o">-&gt;</span><span class="n">icmp_type</span><span class="p">;</span>
</span><span class='line'>    <span class="n">reply_code</span> <span class="o">=</span> <span class="n">icmp_pkt</span><span class="o">-&gt;</span><span class="n">icmp_code</span><span class="p">;</span>
</span><span class='line'>    <span class="k">switch</span> <span class="p">(</span><span class="n">reply_type</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="nl">ICMP_ECHOREPLY:</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">icmp_pkt</span><span class="o">-&gt;</span><span class="n">icmp_id</span> <span class="o">!=</span> <span class="n">id</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">PING_OK</span><span class="p">;</span>
</span><span class='line'>    <span class="k">case</span> <span class="nl">ICMP_DEST_UNREACH:</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">PING_UNREACHABLE</span><span class="p">;</span>
</span><span class='line'>    <span class="k">default</span><span class="o">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 向单个target发送icmp请求, 并计算延时，返回PING_OK(0)或错误原因</span>
</span><span class='line'><span class="kt">int</span> <span class="n">ping</span><span class="p">(</span><span class="k">const</span> <span class="n">string</span><span class="o">&amp;</span> <span class="n">target</span><span class="p">,</span> <span class="kt">int</span> <span class="o">&amp;</span><span class="n">delay</span><span class="p">,</span> <span class="kt">int</span> <span class="n">timeout</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">timeval</span> <span class="n">tmout</span><span class="p">,</span> <span class="n">tmbegin</span><span class="p">,</span> <span class="n">tmend</span><span class="p">;</span>
</span><span class='line'>    <span class="n">tmout</span><span class="p">.</span><span class="n">tv_sec</span> <span class="o">=</span> <span class="n">timeout</span><span class="o">/</span><span class="mi">1000000</span><span class="p">;</span>
</span><span class='line'>    <span class="n">tmout</span><span class="p">.</span><span class="n">tv_usec</span> <span class="o">=</span> <span class="n">timeout</span><span class="o">%</span><span class="mi">1000000</span><span class="p">;</span>
</span><span class='line'>    <span class="n">delay</span> <span class="o">=</span> <span class="n">timeout</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">pid</span> <span class="o">=</span> <span class="n">getpid</span><span class="p">();</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">seq</span> <span class="o">=</span> <span class="mi">10000</span> <span class="o">+</span> <span class="n">rand</span><span class="p">()</span><span class="o">%</span><span class="mi">10000</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">sockaddr_in</span> <span class="n">dest_addr</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">fill_addr</span><span class="p">(</span><span class="n">target</span><span class="p">,</span> <span class="n">dest_addr</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">PING_INVALID_HOST</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">sock_fd</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_RAW</span><span class="p">,</span> <span class="n">IPPROTO_ICMP</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">sock_fd</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">PING_SOCKET_ERROR</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">struct</span> <span class="n">icmp</span> <span class="o">*</span><span class="n">icmp_pkt</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">icmp</span><span class="o">*</span><span class="p">)</span><span class="n">send_pkt</span><span class="p">;</span>
</span><span class='line'>    <span class="n">fill_icmp</span><span class="p">(</span><span class="n">icmp_pkt</span><span class="p">,</span> <span class="n">pid</span><span class="p">,</span> <span class="n">seq</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">sendto</span><span class="p">(</span><span class="n">sock_fd</span><span class="p">,</span> <span class="n">icmp_pkt</span><span class="p">,</span> <span class="n">HEAD_LEN</span><span class="o">+</span><span class="n">DATA_LEN</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="p">(</span><span class="k">struct</span> <span class="n">sockaddr</span><span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">dest_addr</span><span class="p">,</span> <span class="p">(</span><span class="n">socklen_t</span><span class="p">)</span><span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">sockaddr_in</span><span class="p">))</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">close</span><span class="p">(</span><span class="n">sock_fd</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">PING_SOCKET_ERROR</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">sockaddr_in</span> <span class="n">from_addr</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">fromlen</span><span class="p">,</span> <span class="n">pkt_len</span><span class="p">;</span>
</span><span class='line'>    <span class="n">fd_set</span> <span class="n">rfds</span><span class="p">;</span>
</span><span class='line'>    <span class="n">FD_ZERO</span><span class="p">(</span><span class="o">&amp;</span><span class="n">rfds</span><span class="p">);</span>
</span><span class='line'>    <span class="n">FD_SET</span><span class="p">(</span><span class="n">sock_fd</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">rfds</span><span class="p">);</span>
</span><span class='line'>    <span class="n">gettimeofday</span><span class="p">(</span><span class="o">&amp;</span><span class="n">tmbegin</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="kc">true</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">ret</span> <span class="o">=</span> <span class="n">select</span><span class="p">(</span><span class="n">sock_fd</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">rfds</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">tmout</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">ret</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">close</span><span class="p">(</span><span class="n">sock_fd</span><span class="p">);</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">PING_SOCKET_ERROR</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">ret</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">close</span><span class="p">(</span><span class="n">sock_fd</span><span class="p">);</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">PING_TIMEOUT</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">((</span><span class="n">pkt_len</span> <span class="o">=</span> <span class="n">recvfrom</span><span class="p">(</span><span class="n">sock_fd</span><span class="p">,</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="n">recv_pkt</span><span class="p">,</span> <span class="n">PACKET_SIZE</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="p">(</span><span class="k">struct</span> <span class="n">sockaddr</span><span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">from_addr</span><span class="p">,</span> <span class="p">(</span><span class="n">socklen_t</span><span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">fromlen</span><span class="p">))</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">close</span><span class="p">(</span><span class="n">sock_fd</span><span class="p">);</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">PING_SOCKET_ERROR</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">type</span><span class="p">,</span> <span class="n">code</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">((</span><span class="n">ret</span> <span class="o">=</span> <span class="n">check_icmp_reply</span><span class="p">(</span><span class="n">recv_pkt</span><span class="p">,</span> <span class="n">pkt_len</span><span class="p">,</span> <span class="n">pid</span><span class="p">,</span> <span class="n">seq</span><span class="p">,</span> <span class="n">type</span><span class="p">,</span> <span class="n">code</span><span class="p">))</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">gettimeofday</span><span class="p">(</span><span class="o">&amp;</span><span class="n">tmend</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>            <span class="n">delay</span> <span class="o">=</span> <span class="p">(</span><span class="n">tmend</span><span class="p">.</span><span class="n">tv_sec</span> <span class="o">-</span> <span class="n">tmbegin</span><span class="p">.</span><span class="n">tv_sec</span><span class="p">)</span><span class="o">*</span><span class="mi">1000000</span> <span class="o">+</span> <span class="p">(</span><span class="n">tmend</span><span class="p">.</span><span class="n">tv_usec</span> <span class="o">-</span> <span class="n">tmbegin</span><span class="p">.</span><span class="n">tv_usec</span><span class="p">);</span>
</span><span class='line'>            <span class="n">close</span><span class="p">(</span><span class="n">sock_fd</span><span class="p">);</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">ret</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">close</span><span class="p">(</span><span class="n">sock_fd</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 由targets生成相同个数的请求，用于batch_ping</span>
</span><span class='line'><span class="kt">int</span> <span class="n">gen_ping_req</span><span class="p">(</span><span class="k">const</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;&amp;</span> <span class="n">targets</span><span class="p">,</span> <span class="n">list</span><span class="o">&lt;</span><span class="n">PingItem</span><span class="o">&gt;&amp;</span> <span class="n">reqs</span><span class="p">,</span> <span class="kt">int</span> <span class="n">timeout</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">srand</span><span class="p">(</span><span class="n">time</span><span class="p">(</span><span class="nb">NULL</span><span class="p">));</span>
</span><span class='line'>    <span class="n">reqs</span><span class="p">.</span><span class="n">resize</span><span class="p">(</span><span class="n">targets</span><span class="p">.</span><span class="n">size</span><span class="p">());</span>
</span><span class='line'>    <span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;::</span><span class="n">const_iterator</span> <span class="n">it_target</span> <span class="o">=</span> <span class="n">targets</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span>
</span><span class='line'>    <span class="n">list</span><span class="o">&lt;</span><span class="n">PingItem</span><span class="o">&gt;::</span><span class="n">iterator</span> <span class="n">it_req</span> <span class="o">=</span> <span class="n">reqs</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(;</span> <span class="n">it_target</span> <span class="o">!=</span> <span class="n">targets</span><span class="p">.</span><span class="n">end</span><span class="p">();</span> <span class="o">++</span><span class="n">it_target</span><span class="p">,</span> <span class="o">++</span><span class="n">it_req</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">it_req</span><span class="o">-&gt;</span><span class="n">ip</span> <span class="o">=</span> <span class="n">it_target</span><span class="o">-&gt;</span><span class="n">c_str</span><span class="p">();</span>
</span><span class='line'>        <span class="n">it_req</span><span class="o">-&gt;</span><span class="n">seq</span> <span class="o">=</span> <span class="mi">10000</span> <span class="o">+</span> <span class="n">rand</span><span class="p">()</span> <span class="o">%</span> <span class="mi">10000</span><span class="p">;</span>
</span><span class='line'>        <span class="n">it_req</span><span class="o">-&gt;</span><span class="n">delay</span> <span class="o">=</span> <span class="n">timeout</span><span class="p">;</span>
</span><span class='line'>        <span class="n">it_req</span><span class="o">-&gt;</span><span class="n">type</span> <span class="o">=</span> <span class="n">PING_UNKNOWN_TYPE</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 发送一组icmp请求, 用于batch_ping</span>
</span><span class='line'><span class="k">static</span> <span class="kt">int</span> <span class="n">send_icmp</span><span class="p">(</span><span class="kt">int</span> <span class="n">sock_fd</span><span class="p">,</span> <span class="n">list</span><span class="o">&lt;</span><span class="n">PingItem</span><span class="o">&gt;&amp;</span> <span class="n">reqs</span><span class="p">,</span> <span class="n">list</span><span class="o">&lt;</span><span class="n">PingItem</span><span class="o">&gt;&amp;</span> <span class="n">err_reqs</span><span class="p">,</span> <span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">send_count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">list</span><span class="o">&lt;</span><span class="n">PingItem</span><span class="o">&gt;::</span><span class="n">iterator</span> <span class="n">it</span> <span class="o">=</span> <span class="n">reqs</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span> <span class="n">it</span> <span class="o">!=</span> <span class="n">reqs</span><span class="p">.</span><span class="n">end</span><span class="p">();</span> <span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">sock_fd</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">it</span><span class="o">-&gt;</span><span class="n">type</span> <span class="o">=</span> <span class="n">PING_SOCKET_ERROR</span><span class="p">;</span>
</span><span class='line'>            <span class="n">err_reqs</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="o">*</span><span class="n">it</span><span class="p">);</span>
</span><span class='line'>            <span class="n">reqs</span><span class="p">.</span><span class="n">erase</span><span class="p">(</span><span class="n">it</span><span class="o">++</span><span class="p">);</span>
</span><span class='line'>            <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">struct</span> <span class="n">sockaddr_in</span> <span class="n">dest_addr</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">fill_addr</span><span class="p">(</span><span class="n">it</span><span class="o">-&gt;</span><span class="n">ip</span><span class="p">,</span> <span class="n">dest_addr</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">it</span><span class="o">-&gt;</span><span class="n">type</span> <span class="o">=</span> <span class="n">PING_INVALID_HOST</span><span class="p">;</span>
</span><span class='line'>            <span class="n">err_reqs</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="o">*</span><span class="n">it</span><span class="p">);</span>
</span><span class='line'>            <span class="n">reqs</span><span class="p">.</span><span class="n">erase</span><span class="p">(</span><span class="n">it</span><span class="o">++</span><span class="p">);</span>
</span><span class='line'>            <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">struct</span> <span class="n">icmp</span> <span class="o">*</span><span class="n">icmp_pkt</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">icmp</span><span class="o">*</span><span class="p">)</span><span class="n">send_pkt</span><span class="p">;</span>
</span><span class='line'>        <span class="n">fill_icmp</span><span class="p">(</span><span class="n">icmp_pkt</span><span class="p">,</span> <span class="n">id</span><span class="p">,</span> <span class="n">it</span><span class="o">-&gt;</span><span class="n">seq</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">sendto</span><span class="p">(</span><span class="n">sock_fd</span><span class="p">,</span> <span class="n">icmp_pkt</span><span class="p">,</span> <span class="n">HEAD_LEN</span><span class="o">+</span><span class="n">DATA_LEN</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="p">(</span><span class="k">struct</span> <span class="n">sockaddr</span><span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">dest_addr</span><span class="p">,</span> <span class="p">(</span><span class="n">socklen_t</span><span class="p">)</span><span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">sockaddr_in</span><span class="p">))</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%m: %s&quot;</span><span class="p">,</span> <span class="n">it</span><span class="o">-&gt;</span><span class="n">ip</span><span class="p">);</span>
</span><span class='line'>            <span class="n">it</span><span class="o">-&gt;</span><span class="n">type</span> <span class="o">=</span> <span class="n">PING_SOCKET_ERROR</span><span class="p">;</span>
</span><span class='line'>            <span class="n">err_reqs</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="o">*</span><span class="n">it</span><span class="p">);</span>
</span><span class='line'>            <span class="n">reqs</span><span class="p">.</span><span class="n">erase</span><span class="p">(</span><span class="n">it</span><span class="o">++</span><span class="p">);</span>
</span><span class='line'>            <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">send_count</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="n">it</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">send_count</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 异步ping</span>
</span><span class='line'><span class="kt">int</span> <span class="n">batch_ping</span><span class="p">(</span><span class="n">list</span><span class="o">&lt;</span><span class="n">PingItem</span><span class="o">&gt;&amp;</span> <span class="n">reqs</span><span class="p">,</span> <span class="kt">int</span> <span class="n">timeout</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">timeval</span> <span class="n">tmout</span><span class="p">,</span> <span class="n">tmbegin</span><span class="p">,</span> <span class="n">tmend</span><span class="p">;</span>
</span><span class='line'>    <span class="n">tmout</span><span class="p">.</span><span class="n">tv_sec</span> <span class="o">=</span> <span class="n">timeout</span><span class="o">/</span><span class="mi">1000000</span><span class="p">;</span>
</span><span class='line'>    <span class="n">tmout</span><span class="p">.</span><span class="n">tv_usec</span> <span class="o">=</span> <span class="n">timeout</span><span class="o">%</span><span class="mi">1000000</span><span class="p">;</span>
</span><span class='line'>    <span class="n">list</span><span class="o">&lt;</span><span class="n">PingItem</span><span class="o">&gt;</span> <span class="n">done_reqs</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">pid</span> <span class="o">=</span> <span class="n">getpid</span><span class="p">();</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">sock_fd</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_RAW</span><span class="p">,</span> <span class="n">IPPROTO_ICMP</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">sock_fd</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">flags</span> <span class="o">=</span> <span class="n">fcntl</span><span class="p">(</span><span class="n">sock_fd</span><span class="p">,</span> <span class="n">F_GETFL</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>        <span class="n">fcntl</span><span class="p">(</span><span class="n">sock_fd</span><span class="p">,</span> <span class="n">F_SETFL</span><span class="p">,</span> <span class="n">flags</span><span class="o">|</span><span class="n">O_NONBLOCK</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%m&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">send_count</span> <span class="o">=</span> <span class="n">send_icmp</span><span class="p">(</span><span class="n">sock_fd</span><span class="p">,</span> <span class="n">reqs</span><span class="p">,</span> <span class="n">done_reqs</span><span class="p">,</span> <span class="n">pid</span><span class="p">);</span>
</span><span class='line'>    <span class="n">assert</span><span class="p">((</span><span class="n">size_t</span><span class="p">)</span><span class="n">send_count</span> <span class="o">==</span> <span class="n">reqs</span><span class="p">.</span><span class="n">size</span><span class="p">());</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">send_count</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">reqs</span> <span class="o">=</span> <span class="n">done_reqs</span><span class="p">;</span>
</span><span class='line'>        <span class="n">close</span><span class="p">(</span><span class="n">sock_fd</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">sockaddr_in</span> <span class="n">from_addr</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">from_len</span><span class="p">,</span> <span class="n">pkt_len</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">fd_set</span> <span class="n">rfds</span><span class="p">;</span>
</span><span class='line'>    <span class="n">FD_ZERO</span><span class="p">(</span><span class="o">&amp;</span><span class="n">rfds</span><span class="p">);</span>
</span><span class='line'>    <span class="n">FD_SET</span><span class="p">(</span><span class="n">sock_fd</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">rfds</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">error_type</span> <span class="o">=</span> <span class="n">PING_UNKNOWN_TYPE</span><span class="p">;</span>
</span><span class='line'>    <span class="n">gettimeofday</span><span class="p">(</span><span class="o">&amp;</span><span class="n">tmbegin</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">send_count</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">ret</span> <span class="o">=</span> <span class="n">select</span><span class="p">(</span><span class="n">sock_fd</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">rfds</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">tmout</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">ret</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">error_type</span> <span class="o">=</span> <span class="n">PING_SOCKET_ERROR</span><span class="p">;</span>
</span><span class='line'>            <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%m: %d&quot;</span><span class="p">,</span> <span class="n">send_count</span><span class="p">);</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">ret</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">error_type</span> <span class="o">=</span> <span class="n">PING_TIMEOUT</span><span class="p">;</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">((</span><span class="n">pkt_len</span> <span class="o">=</span> <span class="n">recvfrom</span><span class="p">(</span><span class="n">sock_fd</span><span class="p">,</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="n">recv_pkt</span><span class="p">,</span> <span class="n">PACKET_SIZE</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="p">(</span><span class="k">struct</span> <span class="n">sockaddr</span><span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">from_addr</span><span class="p">,</span> <span class="p">(</span><span class="n">socklen_t</span><span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">from_len</span><span class="p">))</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">seq</span><span class="p">,</span> <span class="n">type</span><span class="p">,</span> <span class="n">code</span><span class="p">;</span>
</span><span class='line'>        <span class="n">string</span> <span class="n">rip</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">((</span><span class="n">ret</span><span class="o">=</span><span class="n">check_icmp_reply2</span><span class="p">(</span><span class="n">recv_pkt</span><span class="p">,</span> <span class="n">pkt_len</span><span class="p">,</span> <span class="n">pid</span><span class="p">,</span> <span class="n">seq</span><span class="p">,</span> <span class="n">type</span><span class="p">,</span> <span class="n">code</span><span class="p">,</span> <span class="n">rip</span><span class="p">))</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">gettimeofday</span><span class="p">(</span><span class="o">&amp;</span><span class="n">tmend</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">delay</span> <span class="o">=</span> <span class="p">(</span><span class="n">tmend</span><span class="p">.</span><span class="n">tv_sec</span> <span class="o">-</span> <span class="n">tmbegin</span><span class="p">.</span><span class="n">tv_sec</span><span class="p">)</span><span class="o">*</span><span class="mi">1000000</span> <span class="o">+</span> <span class="p">(</span><span class="n">tmend</span><span class="p">.</span><span class="n">tv_usec</span> <span class="o">-</span> <span class="n">tmbegin</span><span class="p">.</span><span class="n">tv_usec</span><span class="p">);</span>
</span><span class='line'>            <span class="k">for</span> <span class="p">(</span><span class="n">list</span><span class="o">&lt;</span><span class="n">PingItem</span><span class="o">&gt;::</span><span class="n">iterator</span> <span class="n">it</span> <span class="o">=</span> <span class="n">reqs</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span> <span class="n">it</span> <span class="o">!=</span> <span class="n">reqs</span><span class="p">.</span><span class="n">end</span><span class="p">();</span> <span class="o">++</span><span class="n">it</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">it</span><span class="o">-&gt;</span><span class="n">ip</span> <span class="o">!=</span> <span class="n">rip</span><span class="p">)</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">ret</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">it</span><span class="o">-&gt;</span><span class="n">seq</span> <span class="o">!=</span> <span class="n">seq</span><span class="p">)</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="n">send_count</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>                <span class="n">it</span><span class="o">-&gt;</span><span class="n">type</span> <span class="o">=</span> <span class="n">ret</span><span class="p">;</span>
</span><span class='line'>                <span class="n">it</span><span class="o">-&gt;</span><span class="n">delay</span> <span class="o">=</span> <span class="n">delay</span><span class="p">;</span>
</span><span class='line'>                <span class="n">done_reqs</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="o">*</span><span class="n">it</span><span class="p">);</span>
</span><span class='line'>                <span class="n">reqs</span><span class="p">.</span><span class="n">erase</span><span class="p">(</span><span class="n">it</span><span class="p">);</span>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">list</span><span class="o">&lt;</span><span class="n">PingItem</span><span class="o">&gt;::</span><span class="n">iterator</span> <span class="n">it</span> <span class="o">=</span> <span class="n">reqs</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span> <span class="n">it</span> <span class="o">!=</span> <span class="n">reqs</span><span class="p">.</span><span class="n">end</span><span class="p">();</span> <span class="o">++</span><span class="n">it</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">it</span><span class="o">-&gt;</span><span class="n">type</span> <span class="o">=</span> <span class="n">error_type</span><span class="p">;</span>
</span><span class='line'>        <span class="n">done_reqs</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="o">*</span><span class="n">it</span><span class="p">);</span>
</span><span class='line'>        <span class="n">send_count</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">assert</span><span class="p">(</span><span class="n">send_count</span> <span class="o">==</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="n">reqs</span> <span class="o">=</span> <span class="n">done_reqs</span><span class="p">;</span>
</span><span class='line'>    <span class="n">close</span><span class="p">(</span><span class="n">sock_fd</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="n">uint16_t</span> <span class="n">in_cksum</span><span class="p">(</span><span class="n">uint16_t</span> <span class="o">*</span><span class="n">addr</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="n">len</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">uint16_t</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">uint32_t</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">len</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span>  <span class="p">{</span>
</span><span class='line'>        <span class="n">sum</span> <span class="o">+=</span> <span class="o">*</span><span class="n">addr</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="n">len</span> <span class="o">-=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">len</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="o">*</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">answer</span> <span class="o">=</span> <span class="o">*</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="n">addr</span> <span class="p">;</span>
</span><span class='line'>        <span class="n">sum</span> <span class="o">+=</span> <span class="n">answer</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">sum</span> <span class="o">=</span> <span class="p">(</span><span class="n">sum</span> <span class="o">&gt;&gt;</span> <span class="mi">16</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">sum</span> <span class="o">&amp;</span> <span class="mh">0xffff</span><span class="p">);</span>
</span><span class='line'>    <span class="n">sum</span> <span class="o">+=</span> <span class="p">(</span><span class="n">sum</span> <span class="o">&gt;&gt;</span> <span class="mi">16</span><span class="p">);</span>
</span><span class='line'>    <span class="n">answer</span> <span class="o">=</span> <span class="o">~</span><span class="n">sum</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">answer</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">timeout</span> <span class="o">=</span> <span class="mi">1000000</span><span class="p">;</span>
</span><span class='line'>    <span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">targets</span><span class="p">;</span>
</span><span class='line'><span class="cp">#if 0</span><span class="c"></span>
</span><span class='line'><span class="c">    targets.push_back(&quot;127.0.0.1&quot;);</span>
</span><span class='line'><span class="c">    targets.push_back(&quot;192.168.204.128&quot;);</span>
</span><span class='line'><span class="c">    targets.push_back(&quot;172.25.0.29&quot;);</span>
</span><span class='line'><span class="c">    targets.push_back(&quot;10.16.97.37&quot;);</span>
</span><span class='line'><span class="c">    targets.push_back(&quot;172.25.0.29&quot;);</span>
</span><span class='line'><span class="c">    targets.push_back(&quot;10.6.207.128&quot;);</span>
</span><span class='line'><span class="c">    targets.push_back(&quot;www.google.com&quot;);</span>
</span><span class='line'><span class="c">    targets.push_back(&quot;250.250.250.250&quot;);</span>
</span><span class='line'><span class="c">    targets.push_back(&quot;127.0.0.1&quot;);</span>
</span><span class='line'><span class="c">    targets.push_back(&quot;172.25.0.29&quot;);</span>
</span><span class='line'><span class="c">    targets.push_back(&quot;10.6.207.128&quot;);</span>
</span><span class='line'><span class="c">    targets.push_back(&quot;250.250.250.250&quot;);</span>
</span><span class='line'><span class="c">    targets.push_back(&quot;www.google.com&quot;);</span>
</span><span class='line'><span class="c">    targets.push_back(&quot;88.88.88.88&quot;);</span>
</span><span class='line'><span class="c">    targets.push_back(&quot;99.99.99.99&quot;);</span>
</span><span class='line'><span class="c">    targets.push_back(&quot;250.250.250.250&quot;);</span>
</span><span class='line'><span class="c">    targets.push_back(&quot;172.25.0.29&quot;);</span>
</span><span class='line'><span class="c">    targets.push_back(&quot;www.google.com&quot;);</span>
</span><span class='line'><span class="c">    targets.push_back(&quot;10.6.207.128&quot;);</span>
</span><span class='line'><span class="c">    targets.push_back(&quot;250.250.250.250&quot;);</span>
</span><span class='line'><span class="c">    targets.push_back(&quot;255.255.255.255&quot;);</span>
</span><span class='line'><span class="c">    targets.push_back(&quot;172.25.0.29&quot;);</span>
</span><span class='line'><span class="c">    targets.push_back(&quot;www.google.com&quot;);</span>
</span><span class='line'><span class="c">    targets.push_back(&quot;127.0.0.1&quot;);</span>
</span><span class='line'><span class="c">    targets.push_back(&quot;10.6.207.128&quot;);</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>    <span class="n">targets</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="s">&quot;100.100.100.100&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">targets</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="s">&quot;255.255.255.255&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">targets</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="s">&quot;127.0.0.1&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">targets</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="s">&quot;10.6.207.128&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">targets</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="s">&quot;172.25.0.28&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">targets</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="s">&quot;172.25.0.29&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">targets</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="s">&quot;10.16.97.35&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">targets</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="s">&quot;10.16.97.74&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//targets.resize(10000);</span>
</span><span class='line'>    <span class="c1">//fill(targets.begin(), targets.end(), &quot;127.0.0.1&quot;);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">list</span><span class="o">&lt;</span><span class="n">PingItem</span><span class="o">&gt;</span> <span class="n">reqs</span><span class="p">;</span>
</span><span class='line'>    <span class="n">gen_ping_req</span><span class="p">(</span><span class="n">targets</span><span class="p">,</span> <span class="n">reqs</span><span class="p">,</span> <span class="n">timeout</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span><span class="kc">true</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;begin: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">time</span><span class="p">(</span><span class="nb">NULL</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>        <span class="n">batch_ping</span><span class="p">(</span><span class="n">reqs</span><span class="p">,</span> <span class="n">timeout</span><span class="p">);</span>
</span><span class='line'>        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;end: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">time</span><span class="p">(</span><span class="nb">NULL</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="n">list</span><span class="o">&lt;</span><span class="n">PingItem</span><span class="o">&gt;::</span><span class="n">iterator</span> <span class="n">it</span> <span class="o">=</span> <span class="n">reqs</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span> <span class="n">it</span> <span class="o">!=</span> <span class="n">reqs</span><span class="p">.</span><span class="n">end</span><span class="p">();</span> <span class="o">++</span><span class="n">it</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">it</span><span class="o">-&gt;</span><span class="n">ip</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\t</span><span class="s">&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">it</span><span class="o">-&gt;</span><span class="n">seq</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\t</span><span class="s">&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">it</span><span class="o">-&gt;</span><span class="n">type</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\t</span><span class="s">&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">it</span><span class="o">-&gt;</span><span class="n">delay</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Add an optional URL to enable downloading or linking to source.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Javascript Array Syntax </span><a href='http://j.mp/pPUUmW'>MDN Documentation </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">arr1</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="nx">arrayLength</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">arr2</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="nx">element0</span><span class="p">,</span> <span class="nx">element1</span><span class="p">,</span> <span class="p">...,</span> <span class="nx">elementN</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h1>2.   其它插件</h1>

<p>图片：</p>

<p><img src="https://a248.e.akamai.net/assets.github.com/images/modules/header/logo_gist.png?1338945075" title="#3" ></p>

<blockquote><p>markdown区块
这是一个区块</p>

<blockquote><p>子区块</p></blockquote></blockquote>

<p>Quote from a printed work.(区块插件)</p>

<p><blockquote><p>Flying is learning how to throw yourself at the ground and miss.</p><footer><strong>Douglas Adams, The Hichhikers Guide to the Galaxy</strong> <cite><a href='http://octopress.org/docs/plugins/blockquote/'>区块参考链接</a></cite></footer></blockquote></p>

<p><span class='pullquote-right' data-pullquote='surround it like this'>
Surround your paragraph with the pull quote tags. Then when you come to
the text you want to pull, surround it like this and that's all there is to it.
</span></p>

<p>正常文字，我们是<em>正常</em>文字</p>

<h1>3. 正常语法示例</h1>

<hr />

<p>I am <code>tail</code></p>
]]></content>
  </entry>
  
</feed>

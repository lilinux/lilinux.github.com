<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[lilinux's blog]]></title>
  <link href="http://lilinux.github.com/atom.xml" rel="self"/>
  <link href="http://lilinux.github.com/"/>
  <updated>2013-05-08T13:17:57+08:00</updated>
  <id>http://lilinux.github.com/</id>
  <author>
    <name><![CDATA[lilinux]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[cron-sequential]]></title>
    <link href="http://lilinux.github.com/blog/2013/05/cron-sequential/"/>
    <updated>2013-05-07T12:54:00+08:00</updated>
    <id>http://lilinux.github.com/blog/2013/05/cron-sequential</id>
    <content type="html"><![CDATA[<p>test</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[看了几天ruby]]></title>
    <link href="http://lilinux.github.com/blog/2012/10/new-rubyer/"/>
    <updated>2012-10-08T13:35:00+08:00</updated>
    <id>http://lilinux.github.com/blog/2012/10/new-rubyer</id>
    <content type="html"><![CDATA[<p>看了几天ruby，也许是有python的底子，除了block和mixin以外，没有太多的惊叹，只觉得语法糖太多太多</p>

<!--more-->


<p>好吧，其实我是没事找事</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[clint代码阅读笔记]]></title>
    <link href="http://lilinux.github.com/blog/2012/07/clintdai-ma-yue-du-bi-ji-1/"/>
    <updated>2012-07-25T17:18:00+08:00</updated>
    <id>http://lilinux.github.com/blog/2012/07/clintdai-ma-yue-du-bi-ji-1</id>
    <content type="html"><![CDATA[<p>一直认为自己的水平还有待提高，所以尝试在<a href="http://www.github.com">github</a>上找一些有意思的开源代码阅读，即可以陶冶情操，又可以学到一些在实践中各种闪光的东西，如果能参与进去那就更好了。</p>

<p>最先看的是<code>clint</code>, 原托管地址<a href="https://github.com/kennethreitz/clint">在此</a></p>

<!--more-->


<p>clint是一个命令行程序的辅助库，它做了一些繁琐的事，截一断介绍</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>C ommand L ine IN terface T ools .
</span><span class='line'>
</span><span class='line'>Clint is awesome. Crazy awesome. It supports colors, but detects if the session is a TTY, so doesn't render the colors if you're piping stuff around. Automagically.
</span><span class='line'>
</span><span class='line'>Awesome nest-able indentation context manager. Example: (with indent(4): puts('indented text')). It supports custom email-style quotes. Of course, it supports color too, if and when needed.
</span><span class='line'>
</span><span class='line'>It has an awesome Column printer with optional auto-expanding columns. It detects how wide your current console is and adjusts accordingly. It wraps your words properly to fit the column size. With or without colors mixed in. All with a single function call.
</span><span class='line'>
</span><span class='line'>The world's easiest to use implicit argument system w/ chaining methods for filtering. Seriously.
</span></code></pre></td></tr></table></div></figure>


<p>确实看到了一些亮点，做笔记如下：</p>

<h2>获取管道传进来的数据</h2>

<p>管道或重定向将数据发送到当前进程的标准输入。首先需要确定标准输入是否连接了管道然后再读出。</p>

<figure class='code'><figcaption><span>piped_in </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">if</span> <span class="n">sys</span><span class="o">.</span><span class="n">stdin</span><span class="o">.</span><span class="n">isatty</span><span class="p">():</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">sys</span><span class="o">.</span><span class="n">stdin</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span><span class='line'><span class="k">else</span><span class="p">:</span>
</span><span class='line'>    <span class="k">return</span> <span class="bp">None</span>
</span></code></pre></td></tr></table></div></figure>


<p>原理很简单，但不容易想到</p>

<h2>progressbar</h2>

<p>在命令行下的进度条。原来在一些安装或检测脚本的执行结果中看到，进度条会在更新时覆盖掉原有的状态，原来一直以为是和终端相关的很帅气的功能，看到代码原来是很少见的回车符<code>\r</code>，它只回到行首而不换行。</p>

<figure class='code'><figcaption><span>update state in this line</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>
</span><span class='line'>    <span class="n">sys</span><span class="o">.</span><span class="n">stderr</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&#39;time left: </span><span class="si">%3d</span><span class="se">\r</span><span class="s">&#39;</span><span class="o">%</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>    <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>性能优化</h2>

<p>发现clint的代码中对list的处理不够优雅，有些代码可以改得更快更简单。</p>

<p>比如<code>tsplit</code>函数和<code>schunk</code>函数</p>

<figure class='code'><figcaption><span>tsplit</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">tsplit</span><span class="p">(</span><span class="n">string</span><span class="p">,</span> <span class="n">delimiters</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;Behaves str.split but supports tuples of delimiters.&quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">delimiters</span> <span class="o">=</span> <span class="nb">tuple</span><span class="p">(</span><span class="n">delimiters</span><span class="p">)</span>
</span><span class='line'>    <span class="n">stack</span> <span class="o">=</span> <span class="p">[</span><span class="n">string</span><span class="p">,]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="n">delimiter</span> <span class="ow">in</span> <span class="n">delimiters</span><span class="p">:</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">substring</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">stack</span><span class="p">):</span>
</span><span class='line'>            <span class="n">substack</span> <span class="o">=</span> <span class="n">substring</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="n">delimiter</span><span class="p">)</span>
</span><span class='line'>            <span class="n">stack</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>            <span class="k">for</span> <span class="n">j</span><span class="p">,</span> <span class="n">_substring</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">substack</span><span class="p">):</span>
</span><span class='line'>                <span class="n">stack</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="n">j</span><span class="p">,</span> <span class="n">_substring</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">stack</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>schunk</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">schunk</span><span class="p">(</span><span class="n">string</span><span class="p">,</span> <span class="n">size</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;Splits string into n sized chunks.&quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">stack</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">substack</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>    <span class="n">current_count</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="n">char</span> <span class="ow">in</span> <span class="n">string</span><span class="p">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="ow">not</span> <span class="n">current_count</span> <span class="o">&lt;</span> <span class="n">size</span><span class="p">:</span>
</span><span class='line'>            <span class="n">stack</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&#39;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">substack</span><span class="p">))</span>
</span><span class='line'>            <span class="n">substack</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>            <span class="n">current_count</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">substack</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">char</span><span class="p">)</span>
</span><span class='line'>        <span class="n">current_count</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">substack</span><span class="p">):</span>
</span><span class='line'>        <span class="n">stack</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&#39;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">substack</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">stack</span>
</span></code></pre></td></tr></table></div></figure>


<p>这两段代码具有明显的C程序员风格，而我一直认为<strong>Python代码的好坏可以从缩进层次上看出</strong>，如果缩进得扭扭捏捏，那多半是可以优化的，<strong>尤其是对列表的处理</strong></p>

<p>我尝试优化这两个函数</p>

<figure class='code'><figcaption><span>tsplit2</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">tsplit2</span><span class="p">(</span><span class="n">string</span><span class="p">,</span> <span class="n">delimiters</span><span class="p">):</span>
</span><span class='line'>    <span class="n">delimiters</span> <span class="o">=</span> <span class="nb">tuple</span><span class="p">(</span><span class="n">delimiters</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">delimiters</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">[</span><span class="n">string</span><span class="p">,]</span>
</span><span class='line'>    <span class="n">final_delimiter</span> <span class="o">=</span> <span class="n">delimiters</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">delimiters</span><span class="p">[</span><span class="mi">1</span><span class="p">:]:</span>
</span><span class='line'>        <span class="n">string</span> <span class="o">=</span> <span class="n">string</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">final_delimiter</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">string</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="n">final_delimiter</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>schunk2</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">schunk2</span><span class="p">(</span><span class="n">string</span><span class="p">,</span> <span class="n">size</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">string</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span><span class="o">+</span><span class="n">size</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">string</span><span class="p">),</span> <span class="n">size</span><span class="p">)]</span>
</span></code></pre></td></tr></table></div></figure>


<p>不管是从缩进上还是从行数上，是不是都要漂亮一些呢。</p>

<p>好，我们来做一下性能对比：</p>

<figure class='code'><figcaption><span>tsplit性能对比</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">In</span> <span class="p">[</span><span class="mi">35</span><span class="p">]:</span> <span class="n">timeit</span> <span class="o">-</span><span class="n">n</span> <span class="mi">10000</span> <span class="n">utils</span><span class="o">.</span><span class="n">tsplit</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="p">(</span><span class="s">&#39;abc&#39;</span><span class="p">,</span> <span class="s">&#39;def&#39;</span><span class="p">,</span> <span class="s">&#39;for&#39;</span><span class="p">,</span> <span class="s">&#39;xx&#39;</span><span class="p">,</span> <span class="s">&#39;oo&#39;</span><span class="p">,</span> <span class="s">&#39; &#39;</span><span class="p">))</span>
</span><span class='line'><span class="mi">10000</span> <span class="n">loops</span><span class="p">,</span> <span class="n">best</span> <span class="n">of</span> <span class="mi">3</span><span class="p">:</span> <span class="mf">1.62</span> <span class="n">ms</span> <span class="n">per</span> <span class="n">loop</span>
</span><span class='line'>
</span><span class='line'><span class="n">In</span> <span class="p">[</span><span class="mi">36</span><span class="p">]:</span> <span class="n">timeit</span> <span class="o">-</span><span class="n">n</span> <span class="mi">10000</span> <span class="n">utils</span><span class="o">.</span><span class="n">tsplit2</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="p">(</span><span class="s">&#39;abc&#39;</span><span class="p">,</span> <span class="s">&#39;def&#39;</span><span class="p">,</span> <span class="s">&#39;for&#39;</span><span class="p">,</span> <span class="s">&#39;xx&#39;</span><span class="p">,</span> <span class="s">&#39;oo&#39;</span><span class="p">,</span> <span class="s">&#39; &#39;</span><span class="p">))</span>
</span><span class='line'><span class="mi">10000</span> <span class="n">loops</span><span class="p">,</span> <span class="n">best</span> <span class="n">of</span> <span class="mi">3</span><span class="p">:</span> <span class="mi">101</span> <span class="n">us</span> <span class="n">per</span> <span class="n">loop</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>schunk性能对比</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">In</span> <span class="p">[</span><span class="mi">27</span><span class="p">]:</span> <span class="n">timeit</span> <span class="o">-</span><span class="n">n</span> <span class="mi">10000</span> <span class="n">utils</span><span class="o">.</span><span class="n">schunk2</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="mi">8</span><span class="p">)</span>
</span><span class='line'><span class="mi">10000</span> <span class="n">loops</span><span class="p">,</span> <span class="n">best</span> <span class="n">of</span> <span class="mi">3</span><span class="p">:</span> <span class="mf">66.3</span> <span class="n">us</span> <span class="n">per</span> <span class="n">loop</span>
</span><span class='line'>
</span><span class='line'><span class="n">In</span> <span class="p">[</span><span class="mi">28</span><span class="p">]:</span> <span class="n">timeit</span> <span class="o">-</span><span class="n">n</span> <span class="mi">10000</span> <span class="n">utils</span><span class="o">.</span><span class="n">schunk</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="mi">8</span><span class="p">)</span>
</span><span class='line'><span class="mi">10000</span> <span class="n">loops</span><span class="p">,</span> <span class="n">best</span> <span class="n">of</span> <span class="mi">3</span><span class="p">:</span> <span class="mi">956</span> <span class="n">us</span> <span class="n">per</span> <span class="n">loop</span>
</span></code></pre></td></tr></table></div></figure>


<p>竟然都有近10倍以上的性能提升，当然这个比值并不一定准备，我只是随便找了个参数测试。</p>

<p>其实这也印证了另外一条Python和C/C++不同的结论：</p>

<p><strong>要尽量使用Python的标准库，自己写的代码即使再优化也难以达到和库函数媲美的效率</strong></p>

<h2>The End</h2>

<p>clint的代码很朴实有力，通过亮点的叠加实现了一个非常有用的扩展库。以后写对外的命令行程序一定要考虑使用它。</p>

<p>关于最后那个性能的改良，也许有点画蛇添足，就没有去pull代码了，只发了个issue看开发者怎么说。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[markdown测试页面]]></title>
    <link href="http://lilinux.github.com/blog/2012/07/markdownce-shi-ye-mian/"/>
    <updated>2012-07-19T18:43:00+08:00</updated>
    <id>http://lilinux.github.com/blog/2012/07/markdownce-shi-ye-mian</id>
    <content type="html"><![CDATA[<h1>0.    前言</h1>

<p>这是一篇<strong>测试</strong>文档</p>

<hr />

<!--more -->


<h1>1.   代码示例</h1>

<p>Plain</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo make me a sandwich</span></code></pre></td></tr></table></div></figure>


<p>Example With Syntax Highlighting a Caption and Link</p>

<figure class='code'><figcaption><span>Discover if a number is prime </span><a href='http://www.noulakaz.net/weblog/2007/03/18/a-regular-expression-to-check-for-prime-numbers/'>Source Article</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Fixnum</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">prime?</span>
</span><span class='line'>    <span class="p">(</span><span class="s1">&#39;1&#39;</span> <span class="o">*</span> <span class="nb">self</span><span class="p">)</span> <span class="o">!~</span> <span class="sr">/^1?$|^(11+?)\1+$/</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>选择合适的so</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'>
</span><span class='line'><span class="n">sub_version</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">version_info</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'><span class="k">if</span> <span class="n">sub_version</span> <span class="o">==</span> <span class="mi">4</span><span class="p">:</span>
</span><span class='line'>    <span class="kn">import</span> <span class="nn">setproctitle24</span> <span class="kn">as</span> <span class="nn">setproctitlelib</span>
</span><span class='line'><span class="k">elif</span> <span class="n">sub_version</span> <span class="o">==</span> <span class="mi">6</span><span class="p">:</span>
</span><span class='line'>    <span class="kn">import</span> <span class="nn">setproctitle26</span> <span class="kn">as</span> <span class="nn">setproctitlelib</span>
</span><span class='line'><span class="k">else</span><span class="p">:</span>
</span><span class='line'>    <span class="n">setproctitlelib</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">setproctitle</span><span class="p">(</span><span class="n">title</span><span class="p">):</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">setproctitlelib</span><span class="p">:</span>
</span><span class='line'>        <span class="n">setproctitlelib</span><span class="o">.</span><span class="n">setproctitle</span><span class="p">(</span><span class="n">title</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">getproctitle</span><span class="p">():</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">setproctitlelib</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">setproctitlelib</span><span class="o">.</span><span class="n">getproctitle</span><span class="p">()</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="bp">None</span>
</span></code></pre></td></tr></table></div></figure>


<p>File /home/lili/src/tmp/ping.cpp could not be found</p>

<p>Add an optional URL to enable downloading or linking to source.</p>

<figure class='code'><figcaption><span>Javascript Array Syntax </span><a href='http://j.mp/pPUUmW'>MDN Documentation </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">arr1</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="nx">arrayLength</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">arr2</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="nx">element0</span><span class="p">,</span> <span class="nx">element1</span><span class="p">,</span> <span class="p">...,</span> <span class="nx">elementN</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h1>2.   其它插件</h1>

<p>图片：</p>

<p><img src="https://a248.e.akamai.net/assets.github.com/images/modules/header/logo_gist.png?1338945075" title="#3" ></p>

<blockquote><p>markdown区块
这是一个区块</p>

<blockquote><p>子区块</p></blockquote></blockquote>

<p>Quote from a printed work.(区块插件)</p>

<blockquote><p>Flying is learning how to throw yourself at the ground and miss.</p><footer><strong>Douglas Adams, The Hichhikers Guide to the Galaxy</strong> <cite><a href='http://octopress.org/docs/plugins/blockquote/'>区块参考链接</a></cite></footer></blockquote>


<p><span class='pullquote-right' data-pullquote='surround it like this'>
Surround your paragraph with the pull quote tags. Then when you come to
the text you want to pull, surround it like this and that&#8217;s all there is to it.
</span></p>

<p>正常文字，我们是<em>正常</em>文字</p>

<h1>3. 正常语法示例</h1>

<hr />

<p>I am <code>tail</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello]]></title>
    <link href="http://lilinux.github.com/blog/2012/07/hello/"/>
    <updated>2012-07-17T19:34:00+08:00</updated>
    <id>http://lilinux.github.com/blog/2012/07/hello</id>
    <content type="html"><![CDATA[<h2>Hello</h2>

<p>依<strong>葫芦</strong>画了个<strong>瓢</strong></p>
]]></content>
  </entry>
  
</feed>

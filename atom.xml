<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[lilinux's blog]]></title>
  <link href="http://lilinux.github.com/atom.xml" rel="self"/>
  <link href="http://lilinux.github.com/"/>
  <updated>2013-05-08T17:55:52+08:00</updated>
  <id>http://lilinux.github.com/</id>
  <author>
    <name><![CDATA[lilinux]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[crontab任务串行化的尝试]]></title>
    <link href="http://lilinux.github.com/blog/2013/05/cron-sequential/"/>
    <updated>2013-05-07T12:54:00+08:00</updated>
    <id>http://lilinux.github.com/blog/2013/05/cron-sequential</id>
    <content type="html"><![CDATA[<h1>0. 背景</h1>

<p>一开始的时候我提了个问题：</p>

<blockquote><h1>掉过的坑# crontab里有大量的周期任务（各种检测脚本），一到整点的时刻，大量任务同时执行，影响机器瞬时的性能。有没有什么正派的方法来解决此问题？</h1></blockquote>

<p>crontab是神器，人人都爱它，因此每装一个组件，就会附上几个crontab的任务，要么是检测进程运行情况啊，要么是定期收集统计数据啊。这些任务大部分是脚本，大家可能想：我的进程一跑就是跑好几个月，多几个附加脚本检测检测环境，能出啥问题？</p>

<!--more -->


<p>但是这些脚本少则每分钟执行一次，多则每个小时执行一次，大部分都是3分钟、5分钟、15分钟的周期。<code>crontab -l</code>一看，黑压的的一大片</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>* * * * * task1
</span><span class='line'>*/3 * * * * task2
</span><span class='line'>*/5 * * * * task3
</span><span class='line'>*/15 * * * * task4
</span><span class='line'>*/20 * * * * task5
</span><span class='line'>......</span></code></pre></td></tr></table></div></figure>


<p>于是，在某些时刻，crontab会突然拉起大量的进程。尤其是在整点的时刻，所有的任务都会并行地拉起。这对服务器的平稳运行造成了很大的影响！</p>

<h1>1. 思路</h1>

<p>可惜的是，从crontab的机制上，我们啥也做不了。从本质上讲，导致这个现象的原因还是在于crontab的滥用。如果能将crontab的任务统一规划一下当然是再好不过了。不过俺人微言轻，而且每逢扯皮必输。只好琢磨着解决方案。</p>

<p>然后，一个很土气的方法出炉了</p>

<blockquote><p>俺想的一个方法是：创建一个fifo文件作为锁，修改crontab文件，原来的 * * * * * job 改成 * * * * * lock; job; unlock。lock是读取fifo文件，unlock是写fifo文件。通过read阻塞来将crontab任务串行化了。简单的测了一下，效果还不错。不过感觉这样做不够高端大气</p></blockquote>

<p>回答几个其它的考虑方案</p>

<ol>
<li>把cron的时间错开不就好了咩</li>
</ol>


<p>我们可以尝试把周期的“最小公倍数”调大一点，但整点总是绕不过去的</p>

<ol>
<li>在任务执行前随机sleep不就好了咩</li>
</ol>


<p>sleep多久？怎么随机才会减少并发？</p>

<ol>
<li>把周期相同的任务合成一个任务串行执行不就好了咩</li>
</ol>


<p>首先各种周期都有，不大好合；其次合起来不利于增删任务</p>

<ol>
<li>为啥不用文件锁</li>
</ol>


<p>文件锁也许是一种更好的阻塞串行方案。不过我们这里特定的场景导致不能用文件锁。本文后面的代码都是基于命名管道的。</p>

<h1>2. 尝试</h1>

<p>首先创建一个fifo</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkfifo /var/lock.fifo</span></code></pre></td></tr></table></div></figure>


<p>编写lock和unlock脚本</p>

<figure class='code'><figcaption><span>test_lock</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="nv">content</span><span class="o">=</span><span class="sb">`</span>cat /var/lock.fifo<span class="sb">`</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> -z <span class="s2">&quot;$content&quot;</span> <span class="o">]</span>
</span><span class='line'><span class="k">then</span>
</span><span class='line'>    <span class="nv">$0</span>
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>test_unlock</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'>/usr/bin/nohup <span class="nb">echo</span> <span class="s1">&#39;ok&#39;</span> &gt;  /var/lock.fifo &amp;
</span></code></pre></td></tr></table></div></figure>


<p><strong>Notice</strong>:</p>

<p>unlock要nohup是因为如果没有读管道者，往管道写消息会阻塞。这个阻塞是我们不需要关注的，所以就让它一直阻塞。</p>

<p>lock时要重试是因为如果管道中有数据时，如果两个读端同时读取，都会成功返回，但只有一个能读到数据。（这类似于惊群效应）所以要校验下读到的东西是不是空的。</p>

<p>然后把脚本安装到可执行文件搜索路径中.</p>

<p>写一个测试脚本</p>

<figure class='code'><figcaption><span>/tmp/waste.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/env python</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">time</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1000</span><span class="p">):</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1000</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>    <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.001</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>创建一个cgroup，并将cron进程的pid加入其中（用于统计cpu时间）</p>

<p>写一个统计脚本</p>

<figure class='code'><figcaption><span>/tmp/acct.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/env python</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">time</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">acct</span><span class="p">():</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">int</span><span class="p">(</span><span class="nb">open</span><span class="p">(</span><span class="s">&#39;/cgroup/cron/cpuacct.usage&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">()</span><span class="o">.</span><span class="n">strip</span><span class="p">())</span>
</span><span class='line'>
</span><span class='line'><span class="n">tmp</span> <span class="o">=</span> <span class="n">acct</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class='line'>    <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="n">current</span> <span class="o">=</span> <span class="n">acct</span><span class="p">()</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">time</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s">&#39;%H:%M:%S&#39;</span><span class="p">),</span> <span class="n">current</span> <span class="o">-</span> <span class="n">tmp</span>
</span><span class='line'>    <span class="n">tmp</span> <span class="o">=</span> <span class="n">current</span>
</span></code></pre></td></tr></table></div></figure>


<h2>2.1 测试默认的cpu使用情况</h2>

<p>把crontab里的内容清空，并添加以下几行</p>

<figure class='code'><figcaption><span>/tmp/acct.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">*</span> <span class="o">*</span> <span class="o">*</span> <span class="o">*</span> <span class="o">*</span> <span class="o">/</span><span class="n">tmp</span><span class="o">/</span><span class="n">waste</span><span class="o">.</span><span class="n">py</span>
</span><span class='line'><span class="o">*</span> <span class="o">*</span> <span class="o">*</span> <span class="o">*</span> <span class="o">*</span> <span class="o">/</span><span class="n">tmp</span><span class="o">/</span><span class="n">waste</span><span class="o">.</span><span class="n">py</span>
</span><span class='line'><span class="o">*</span> <span class="o">*</span> <span class="o">*</span> <span class="o">*</span> <span class="o">*</span> <span class="o">/</span><span class="n">tmp</span><span class="o">/</span><span class="n">waste</span><span class="o">.</span><span class="n">py</span>
</span><span class='line'><span class="o">*</span> <span class="o">*</span> <span class="o">*</span> <span class="o">*</span> <span class="o">*</span> <span class="o">/</span><span class="n">tmp</span><span class="o">/</span><span class="n">waste</span><span class="o">.</span><span class="n">py</span>
</span><span class='line'><span class="o">*</span> <span class="o">*</span> <span class="o">*</span> <span class="o">*</span> <span class="o">*</span> <span class="o">/</span><span class="n">tmp</span><span class="o">/</span><span class="n">waste</span><span class="o">.</span><span class="n">py</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后通过acct.py查看cron的cpu使用</p>

<h2>2.2 测试加锁后的cpu使用情况</h2>

<p>我们先往管道里写个东西。</p>

<figure class='code'><figcaption><span>/tmp/acct.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">test_unlock</span>
</span></code></pre></td></tr></table></div></figure>


<p>把crontab里的内容改为</p>

<figure class='code'><figcaption><span>/tmp/acct.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">*</span> <span class="o">*</span> <span class="o">*</span> <span class="o">*</span> <span class="o">*</span> <span class="n">test_lock</span><span class="p">;</span> <span class="o">/</span><span class="n">tmp</span><span class="o">/</span><span class="n">waste</span><span class="o">.</span><span class="n">py</span><span class="p">;</span> <span class="n">test_unlock</span>
</span><span class='line'><span class="o">*</span> <span class="o">*</span> <span class="o">*</span> <span class="o">*</span> <span class="o">*</span> <span class="n">test_lock</span><span class="p">;</span> <span class="o">/</span><span class="n">tmp</span><span class="o">/</span><span class="n">waste</span><span class="o">.</span><span class="n">py</span><span class="p">;</span> <span class="n">test_unlock</span>
</span><span class='line'><span class="o">*</span> <span class="o">*</span> <span class="o">*</span> <span class="o">*</span> <span class="o">*</span> <span class="n">test_lock</span><span class="p">;</span> <span class="o">/</span><span class="n">tmp</span><span class="o">/</span><span class="n">waste</span><span class="o">.</span><span class="n">py</span><span class="p">;</span> <span class="n">test_unlock</span>
</span><span class='line'><span class="o">*</span> <span class="o">*</span> <span class="o">*</span> <span class="o">*</span> <span class="o">*</span> <span class="n">test_lock</span><span class="p">;</span> <span class="o">/</span><span class="n">tmp</span><span class="o">/</span><span class="n">waste</span><span class="o">.</span><span class="n">py</span><span class="p">;</span> <span class="n">test_unlock</span>
</span><span class='line'><span class="o">*</span> <span class="o">*</span> <span class="o">*</span> <span class="o">*</span> <span class="o">*</span> <span class="n">test_lock</span><span class="p">;</span> <span class="o">/</span><span class="n">tmp</span><span class="o">/</span><span class="n">waste</span><span class="o">.</span><span class="n">py</span><span class="p">;</span> <span class="n">test_unlock</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后通过acct.py查看cron的cpu使用</p>

<h2>2.3 结果</h2>

<p>截取加锁前后两分钟acct.py的输出</p>

<figure class='code'><figcaption><span>/tmp/acct.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">34</span><span class="p">:</span><span class="mo">00</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">34</span><span class="p">:</span><span class="mo">01</span> <span class="mi">90657281</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">34</span><span class="p">:</span><span class="mo">02</span> <span class="mi">505697663</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">34</span><span class="p">:</span><span class="mo">03</span> <span class="mi">83205572</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">34</span><span class="p">:</span><span class="mo">04</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">34</span><span class="p">:</span><span class="mo">05</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">34</span><span class="p">:</span><span class="mo">06</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">34</span><span class="p">:</span><span class="mo">07</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">34</span><span class="p">:</span><span class="mi">08</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">34</span><span class="p">:</span><span class="mi">09</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">34</span><span class="p">:</span><span class="mi">10</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">34</span><span class="p">:</span><span class="mi">11</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">34</span><span class="p">:</span><span class="mi">12</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">34</span><span class="p">:</span><span class="mi">13</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">34</span><span class="p">:</span><span class="mi">14</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">34</span><span class="p">:</span><span class="mi">15</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">34</span><span class="p">:</span><span class="mi">16</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">34</span><span class="p">:</span><span class="mi">17</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">34</span><span class="p">:</span><span class="mi">18</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">34</span><span class="p">:</span><span class="mi">19</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">34</span><span class="p">:</span><span class="mi">20</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">34</span><span class="p">:</span><span class="mi">21</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">34</span><span class="p">:</span><span class="mi">22</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">34</span><span class="p">:</span><span class="mi">23</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">34</span><span class="p">:</span><span class="mi">24</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">34</span><span class="p">:</span><span class="mi">25</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">34</span><span class="p">:</span><span class="mi">26</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">34</span><span class="p">:</span><span class="mi">27</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">34</span><span class="p">:</span><span class="mi">28</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">34</span><span class="p">:</span><span class="mi">30</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">34</span><span class="p">:</span><span class="mi">31</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">34</span><span class="p">:</span><span class="mi">32</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">34</span><span class="p">:</span><span class="mi">33</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">34</span><span class="p">:</span><span class="mi">34</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">34</span><span class="p">:</span><span class="mi">35</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">34</span><span class="p">:</span><span class="mi">36</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">34</span><span class="p">:</span><span class="mi">37</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">34</span><span class="p">:</span><span class="mi">38</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">34</span><span class="p">:</span><span class="mi">39</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">34</span><span class="p">:</span><span class="mi">40</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">34</span><span class="p">:</span><span class="mi">41</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">34</span><span class="p">:</span><span class="mi">42</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">34</span><span class="p">:</span><span class="mi">43</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">34</span><span class="p">:</span><span class="mi">44</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">34</span><span class="p">:</span><span class="mi">45</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">34</span><span class="p">:</span><span class="mi">46</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">34</span><span class="p">:</span><span class="mi">47</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">34</span><span class="p">:</span><span class="mi">48</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">34</span><span class="p">:</span><span class="mi">49</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">34</span><span class="p">:</span><span class="mi">50</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">34</span><span class="p">:</span><span class="mi">51</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">34</span><span class="p">:</span><span class="mi">52</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">34</span><span class="p">:</span><span class="mi">53</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">34</span><span class="p">:</span><span class="mi">54</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">34</span><span class="p">:</span><span class="mi">55</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">34</span><span class="p">:</span><span class="mi">56</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">34</span><span class="p">:</span><span class="mi">57</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">34</span><span class="p">:</span><span class="mi">58</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">34</span><span class="p">:</span><span class="mi">59</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">35</span><span class="p">:</span><span class="mo">00</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">35</span><span class="p">:</span><span class="mo">01</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">35</span><span class="p">:</span><span class="mo">02</span> <span class="mi">161811573</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">35</span><span class="p">:</span><span class="mo">03</span> <span class="mi">134427012</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">35</span><span class="p">:</span><span class="mo">04</span> <span class="mi">132026009</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">35</span><span class="p">:</span><span class="mo">05</span> <span class="mi">125121714</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">35</span><span class="p">:</span><span class="mo">06</span> <span class="mi">109596054</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">35</span><span class="p">:</span><span class="mo">07</span> <span class="mi">122559198</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">35</span><span class="p">:</span><span class="mi">08</span> <span class="mi">36414980</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">35</span><span class="p">:</span><span class="mi">09</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">35</span><span class="p">:</span><span class="mi">10</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">35</span><span class="p">:</span><span class="mi">11</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">35</span><span class="p">:</span><span class="mi">12</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">35</span><span class="p">:</span><span class="mi">13</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">35</span><span class="p">:</span><span class="mi">14</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">35</span><span class="p">:</span><span class="mi">15</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">35</span><span class="p">:</span><span class="mi">16</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">35</span><span class="p">:</span><span class="mi">17</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">35</span><span class="p">:</span><span class="mi">18</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">35</span><span class="p">:</span><span class="mi">19</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">35</span><span class="p">:</span><span class="mi">20</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">35</span><span class="p">:</span><span class="mi">21</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">35</span><span class="p">:</span><span class="mi">22</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">35</span><span class="p">:</span><span class="mi">23</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">35</span><span class="p">:</span><span class="mi">24</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">35</span><span class="p">:</span><span class="mi">25</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">35</span><span class="p">:</span><span class="mi">26</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">35</span><span class="p">:</span><span class="mi">27</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">35</span><span class="p">:</span><span class="mi">28</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">35</span><span class="p">:</span><span class="mi">29</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">35</span><span class="p">:</span><span class="mi">30</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">35</span><span class="p">:</span><span class="mi">31</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">35</span><span class="p">:</span><span class="mi">32</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">35</span><span class="p">:</span><span class="mi">33</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">35</span><span class="p">:</span><span class="mi">34</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">35</span><span class="p">:</span><span class="mi">35</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">35</span><span class="p">:</span><span class="mi">36</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">35</span><span class="p">:</span><span class="mi">37</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">35</span><span class="p">:</span><span class="mi">38</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">35</span><span class="p">:</span><span class="mi">39</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">35</span><span class="p">:</span><span class="mi">40</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">35</span><span class="p">:</span><span class="mi">41</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">35</span><span class="p">:</span><span class="mi">42</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">35</span><span class="p">:</span><span class="mi">43</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">35</span><span class="p">:</span><span class="mi">44</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">35</span><span class="p">:</span><span class="mi">45</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">35</span><span class="p">:</span><span class="mi">46</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">35</span><span class="p">:</span><span class="mi">47</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">35</span><span class="p">:</span><span class="mi">48</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">35</span><span class="p">:</span><span class="mi">49</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">35</span><span class="p">:</span><span class="mi">50</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">35</span><span class="p">:</span><span class="mi">51</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">35</span><span class="p">:</span><span class="mi">52</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">35</span><span class="p">:</span><span class="mi">53</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">35</span><span class="p">:</span><span class="mi">54</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">35</span><span class="p">:</span><span class="mi">55</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">35</span><span class="p">:</span><span class="mi">56</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">35</span><span class="p">:</span><span class="mi">57</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">35</span><span class="p">:</span><span class="mi">58</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">11</span><span class="p">:</span><span class="mi">35</span><span class="p">:</span><span class="mi">59</span> <span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[看了几天ruby]]></title>
    <link href="http://lilinux.github.com/blog/2012/10/new-rubyer/"/>
    <updated>2012-10-08T13:35:00+08:00</updated>
    <id>http://lilinux.github.com/blog/2012/10/new-rubyer</id>
    <content type="html"><![CDATA[<p>看了几天ruby，也许是有python的底子，除了block和mixin以外，没有太多的惊叹，只觉得语法糖太多太多</p>

<!--more-->


<p>好吧，其实我是没事找事</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[clint代码阅读笔记]]></title>
    <link href="http://lilinux.github.com/blog/2012/07/clintdai-ma-yue-du-bi-ji-1/"/>
    <updated>2012-07-25T17:18:00+08:00</updated>
    <id>http://lilinux.github.com/blog/2012/07/clintdai-ma-yue-du-bi-ji-1</id>
    <content type="html"><![CDATA[<p>一直认为自己的水平还有待提高，所以尝试在<a href="http://www.github.com">github</a>上找一些有意思的开源代码阅读，即可以陶冶情操，又可以学到一些在实践中各种闪光的东西，如果能参与进去那就更好了。</p>

<p>最先看的是<code>clint</code>, 原托管地址<a href="https://github.com/kennethreitz/clint">在此</a></p>

<!--more-->


<p>clint是一个命令行程序的辅助库，它做了一些繁琐的事，截一断介绍</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>C ommand L ine IN terface T ools .
</span><span class='line'>
</span><span class='line'>Clint is awesome. Crazy awesome. It supports colors, but detects if the session is a TTY, so doesn't render the colors if you're piping stuff around. Automagically.
</span><span class='line'>
</span><span class='line'>Awesome nest-able indentation context manager. Example: (with indent(4): puts('indented text')). It supports custom email-style quotes. Of course, it supports color too, if and when needed.
</span><span class='line'>
</span><span class='line'>It has an awesome Column printer with optional auto-expanding columns. It detects how wide your current console is and adjusts accordingly. It wraps your words properly to fit the column size. With or without colors mixed in. All with a single function call.
</span><span class='line'>
</span><span class='line'>The world's easiest to use implicit argument system w/ chaining methods for filtering. Seriously.
</span></code></pre></td></tr></table></div></figure>


<p>确实看到了一些亮点，做笔记如下：</p>

<h2>获取管道传进来的数据</h2>

<p>管道或重定向将数据发送到当前进程的标准输入。首先需要确定标准输入是否连接了管道然后再读出。</p>

<figure class='code'><figcaption><span>piped_in </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">if</span> <span class="n">sys</span><span class="o">.</span><span class="n">stdin</span><span class="o">.</span><span class="n">isatty</span><span class="p">():</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">sys</span><span class="o">.</span><span class="n">stdin</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span><span class='line'><span class="k">else</span><span class="p">:</span>
</span><span class='line'>    <span class="k">return</span> <span class="bp">None</span>
</span></code></pre></td></tr></table></div></figure>


<p>原理很简单，但不容易想到</p>

<h2>progressbar</h2>

<p>在命令行下的进度条。原来在一些安装或检测脚本的执行结果中看到，进度条会在更新时覆盖掉原有的状态，原来一直以为是和终端相关的很帅气的功能，看到代码原来是很少见的回车符<code>\r</code>，它只回到行首而不换行。</p>

<figure class='code'><figcaption><span>update state in this line</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>
</span><span class='line'>    <span class="n">sys</span><span class="o">.</span><span class="n">stderr</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&#39;time left: </span><span class="si">%3d</span><span class="se">\r</span><span class="s">&#39;</span><span class="o">%</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>    <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>性能优化</h2>

<p>发现clint的代码中对list的处理不够优雅，有些代码可以改得更快更简单。</p>

<p>比如<code>tsplit</code>函数和<code>schunk</code>函数</p>

<figure class='code'><figcaption><span>tsplit</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">tsplit</span><span class="p">(</span><span class="n">string</span><span class="p">,</span> <span class="n">delimiters</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;Behaves str.split but supports tuples of delimiters.&quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">delimiters</span> <span class="o">=</span> <span class="nb">tuple</span><span class="p">(</span><span class="n">delimiters</span><span class="p">)</span>
</span><span class='line'>    <span class="n">stack</span> <span class="o">=</span> <span class="p">[</span><span class="n">string</span><span class="p">,]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="n">delimiter</span> <span class="ow">in</span> <span class="n">delimiters</span><span class="p">:</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">substring</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">stack</span><span class="p">):</span>
</span><span class='line'>            <span class="n">substack</span> <span class="o">=</span> <span class="n">substring</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="n">delimiter</span><span class="p">)</span>
</span><span class='line'>            <span class="n">stack</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>            <span class="k">for</span> <span class="n">j</span><span class="p">,</span> <span class="n">_substring</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">substack</span><span class="p">):</span>
</span><span class='line'>                <span class="n">stack</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="n">j</span><span class="p">,</span> <span class="n">_substring</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">stack</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>schunk</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">schunk</span><span class="p">(</span><span class="n">string</span><span class="p">,</span> <span class="n">size</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;Splits string into n sized chunks.&quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">stack</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">substack</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>    <span class="n">current_count</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="n">char</span> <span class="ow">in</span> <span class="n">string</span><span class="p">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="ow">not</span> <span class="n">current_count</span> <span class="o">&lt;</span> <span class="n">size</span><span class="p">:</span>
</span><span class='line'>            <span class="n">stack</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&#39;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">substack</span><span class="p">))</span>
</span><span class='line'>            <span class="n">substack</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>            <span class="n">current_count</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">substack</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">char</span><span class="p">)</span>
</span><span class='line'>        <span class="n">current_count</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">substack</span><span class="p">):</span>
</span><span class='line'>        <span class="n">stack</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&#39;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">substack</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">stack</span>
</span></code></pre></td></tr></table></div></figure>


<p>这两段代码具有明显的C程序员风格，而我一直认为<strong>Python代码的好坏可以从缩进层次上看出</strong>，如果缩进得扭扭捏捏，那多半是可以优化的，<strong>尤其是对列表的处理</strong></p>

<p>我尝试优化这两个函数</p>

<figure class='code'><figcaption><span>tsplit2</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">tsplit2</span><span class="p">(</span><span class="n">string</span><span class="p">,</span> <span class="n">delimiters</span><span class="p">):</span>
</span><span class='line'>    <span class="n">delimiters</span> <span class="o">=</span> <span class="nb">tuple</span><span class="p">(</span><span class="n">delimiters</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">delimiters</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">[</span><span class="n">string</span><span class="p">,]</span>
</span><span class='line'>    <span class="n">final_delimiter</span> <span class="o">=</span> <span class="n">delimiters</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">delimiters</span><span class="p">[</span><span class="mi">1</span><span class="p">:]:</span>
</span><span class='line'>        <span class="n">string</span> <span class="o">=</span> <span class="n">string</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">final_delimiter</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">string</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="n">final_delimiter</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>schunk2</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">schunk2</span><span class="p">(</span><span class="n">string</span><span class="p">,</span> <span class="n">size</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">string</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span><span class="o">+</span><span class="n">size</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">string</span><span class="p">),</span> <span class="n">size</span><span class="p">)]</span>
</span></code></pre></td></tr></table></div></figure>


<p>不管是从缩进上还是从行数上，是不是都要漂亮一些呢。</p>

<p>好，我们来做一下性能对比：</p>

<figure class='code'><figcaption><span>tsplit性能对比</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">In</span> <span class="p">[</span><span class="mi">35</span><span class="p">]:</span> <span class="n">timeit</span> <span class="o">-</span><span class="n">n</span> <span class="mi">10000</span> <span class="n">utils</span><span class="o">.</span><span class="n">tsplit</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="p">(</span><span class="s">&#39;abc&#39;</span><span class="p">,</span> <span class="s">&#39;def&#39;</span><span class="p">,</span> <span class="s">&#39;for&#39;</span><span class="p">,</span> <span class="s">&#39;xx&#39;</span><span class="p">,</span> <span class="s">&#39;oo&#39;</span><span class="p">,</span> <span class="s">&#39; &#39;</span><span class="p">))</span>
</span><span class='line'><span class="mi">10000</span> <span class="n">loops</span><span class="p">,</span> <span class="n">best</span> <span class="n">of</span> <span class="mi">3</span><span class="p">:</span> <span class="mf">1.62</span> <span class="n">ms</span> <span class="n">per</span> <span class="n">loop</span>
</span><span class='line'>
</span><span class='line'><span class="n">In</span> <span class="p">[</span><span class="mi">36</span><span class="p">]:</span> <span class="n">timeit</span> <span class="o">-</span><span class="n">n</span> <span class="mi">10000</span> <span class="n">utils</span><span class="o">.</span><span class="n">tsplit2</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="p">(</span><span class="s">&#39;abc&#39;</span><span class="p">,</span> <span class="s">&#39;def&#39;</span><span class="p">,</span> <span class="s">&#39;for&#39;</span><span class="p">,</span> <span class="s">&#39;xx&#39;</span><span class="p">,</span> <span class="s">&#39;oo&#39;</span><span class="p">,</span> <span class="s">&#39; &#39;</span><span class="p">))</span>
</span><span class='line'><span class="mi">10000</span> <span class="n">loops</span><span class="p">,</span> <span class="n">best</span> <span class="n">of</span> <span class="mi">3</span><span class="p">:</span> <span class="mi">101</span> <span class="n">us</span> <span class="n">per</span> <span class="n">loop</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>schunk性能对比</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">In</span> <span class="p">[</span><span class="mi">27</span><span class="p">]:</span> <span class="n">timeit</span> <span class="o">-</span><span class="n">n</span> <span class="mi">10000</span> <span class="n">utils</span><span class="o">.</span><span class="n">schunk2</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="mi">8</span><span class="p">)</span>
</span><span class='line'><span class="mi">10000</span> <span class="n">loops</span><span class="p">,</span> <span class="n">best</span> <span class="n">of</span> <span class="mi">3</span><span class="p">:</span> <span class="mf">66.3</span> <span class="n">us</span> <span class="n">per</span> <span class="n">loop</span>
</span><span class='line'>
</span><span class='line'><span class="n">In</span> <span class="p">[</span><span class="mi">28</span><span class="p">]:</span> <span class="n">timeit</span> <span class="o">-</span><span class="n">n</span> <span class="mi">10000</span> <span class="n">utils</span><span class="o">.</span><span class="n">schunk</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="mi">8</span><span class="p">)</span>
</span><span class='line'><span class="mi">10000</span> <span class="n">loops</span><span class="p">,</span> <span class="n">best</span> <span class="n">of</span> <span class="mi">3</span><span class="p">:</span> <span class="mi">956</span> <span class="n">us</span> <span class="n">per</span> <span class="n">loop</span>
</span></code></pre></td></tr></table></div></figure>


<p>竟然都有近10倍以上的性能提升，当然这个比值并不一定准备，我只是随便找了个参数测试。</p>

<p>其实这也印证了另外一条Python和C/C++不同的结论：</p>

<p><strong>要尽量使用Python的标准库，自己写的代码即使再优化也难以达到和库函数媲美的效率</strong></p>

<h2>The End</h2>

<p>clint的代码很朴实有力，通过亮点的叠加实现了一个非常有用的扩展库。以后写对外的命令行程序一定要考虑使用它。</p>

<p>关于最后那个性能的改良，也许有点画蛇添足，就没有去pull代码了，只发了个issue看开发者怎么说。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[markdown测试页面]]></title>
    <link href="http://lilinux.github.com/blog/2012/07/markdownce-shi-ye-mian/"/>
    <updated>2012-07-19T18:43:00+08:00</updated>
    <id>http://lilinux.github.com/blog/2012/07/markdownce-shi-ye-mian</id>
    <content type="html"><![CDATA[<h1>0.    前言</h1>

<p>这是一篇<strong>测试</strong>文档</p>

<hr />

<!--more -->


<h1>1.   代码示例</h1>

<p>Plain</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo make me a sandwich</span></code></pre></td></tr></table></div></figure>


<p>Example With Syntax Highlighting a Caption and Link</p>

<figure class='code'><figcaption><span>Discover if a number is prime </span><a href='http://www.noulakaz.net/weblog/2007/03/18/a-regular-expression-to-check-for-prime-numbers/'>Source Article</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Fixnum</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">prime?</span>
</span><span class='line'>    <span class="p">(</span><span class="s1">&#39;1&#39;</span> <span class="o">*</span> <span class="nb">self</span><span class="p">)</span> <span class="o">!~</span> <span class="sr">/^1?$|^(11+?)\1+$/</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>选择合适的so</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'>
</span><span class='line'><span class="n">sub_version</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">version_info</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'><span class="k">if</span> <span class="n">sub_version</span> <span class="o">==</span> <span class="mi">4</span><span class="p">:</span>
</span><span class='line'>    <span class="kn">import</span> <span class="nn">setproctitle24</span> <span class="kn">as</span> <span class="nn">setproctitlelib</span>
</span><span class='line'><span class="k">elif</span> <span class="n">sub_version</span> <span class="o">==</span> <span class="mi">6</span><span class="p">:</span>
</span><span class='line'>    <span class="kn">import</span> <span class="nn">setproctitle26</span> <span class="kn">as</span> <span class="nn">setproctitlelib</span>
</span><span class='line'><span class="k">else</span><span class="p">:</span>
</span><span class='line'>    <span class="n">setproctitlelib</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">setproctitle</span><span class="p">(</span><span class="n">title</span><span class="p">):</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">setproctitlelib</span><span class="p">:</span>
</span><span class='line'>        <span class="n">setproctitlelib</span><span class="o">.</span><span class="n">setproctitle</span><span class="p">(</span><span class="n">title</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">getproctitle</span><span class="p">():</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">setproctitlelib</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">setproctitlelib</span><span class="o">.</span><span class="n">getproctitle</span><span class="p">()</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="bp">None</span>
</span></code></pre></td></tr></table></div></figure>


<p>File /home/lili/src/tmp/ping.cpp could not be found</p>

<p>Add an optional URL to enable downloading or linking to source.</p>

<figure class='code'><figcaption><span>Javascript Array Syntax </span><a href='http://j.mp/pPUUmW'>MDN Documentation </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">arr1</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="nx">arrayLength</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">arr2</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="nx">element0</span><span class="p">,</span> <span class="nx">element1</span><span class="p">,</span> <span class="p">...,</span> <span class="nx">elementN</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h1>2.   其它插件</h1>

<p>图片：</p>

<p><img src="https://a248.e.akamai.net/assets.github.com/images/modules/header/logo_gist.png?1338945075" title="#3" ></p>

<blockquote><p>markdown区块
这是一个区块</p>

<blockquote><p>子区块</p></blockquote></blockquote>

<p>Quote from a printed work.(区块插件)</p>

<blockquote><p>Flying is learning how to throw yourself at the ground and miss.</p><footer><strong>Douglas Adams, The Hichhikers Guide to the Galaxy</strong> <cite><a href='http://octopress.org/docs/plugins/blockquote/'>区块参考链接</a></cite></footer></blockquote>


<p><span class='pullquote-right' data-pullquote='surround it like this'>
Surround your paragraph with the pull quote tags. Then when you come to
the text you want to pull, surround it like this and that&#8217;s all there is to it.
</span></p>

<p>正常文字，我们是<em>正常</em>文字</p>

<h1>3. 正常语法示例</h1>

<hr />

<p>I am <code>tail</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello]]></title>
    <link href="http://lilinux.github.com/blog/2012/07/hello/"/>
    <updated>2012-07-17T19:34:00+08:00</updated>
    <id>http://lilinux.github.com/blog/2012/07/hello</id>
    <content type="html"><![CDATA[<h2>Hello</h2>

<p>依<strong>葫芦</strong>画了个<strong>瓢</strong></p>
]]></content>
  </entry>
  
</feed>
